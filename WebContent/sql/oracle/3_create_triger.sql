CREATE OR REPLACE TRIGGER "sys_login_info_trg"
BEFORE INSERT ON SYS_LOGIN_INFO
FOR EACH ROW
BEGIN
IF INSERTING AND :new.login_info_id IS NULL THEN
SELECT sq_sys_login_info.NEXTVAL INTO :new.login_info_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "sys_login_info_trg" ENABLE;


CREATE OR REPLACE TRIGGER "sys_user_login_trg"
BEFORE INSERT ON sys_user_login
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT sq_sys_user_login.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "sys_user_login_trg" ENABLE;


CREATE OR REPLACE TRIGGER "sys_role_trg"
BEFORE INSERT ON SYS_ROLE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.role_id IS NULL THEN
SELECT sq_sys_role.NEXTVAL INTO :new.role_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "sys_role_trg" ENABLE;


CREATE OR REPLACE TRIGGER "sys_user_trg"
BEFORE INSERT ON sys_user
FOR EACH ROW
BEGIN
IF INSERTING AND :new.user_id IS NULL THEN
SELECT sq_sys_user.NEXTVAL INTO :new.user_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "sys_user_trg" ENABLE;


CREATE OR REPLACE TRIGGER "sys_log_oper_trg"
BEFORE INSERT ON SYS_LOG_OPER
FOR EACH ROW
BEGIN
IF INSERTING AND :new.log_id IS NULL THEN
SELECT sq_sys_log_oper.NEXTVAL INTO :new.log_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "sys_log_oper_trg" ENABLE;


CREATE OR REPLACE TRIGGER "sys_user_history_trg"
BEFORE INSERT ON sys_user_history
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT sq_sys_user_history.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "sys_user_history_trg" ENABLE;


CREATE OR REPLACE TRIGGER "SRVS_MEDICAMENTS_category_trg"
BEFORE INSERT ON SRVS_MEDICAMENTS_category
FOR EACH ROW
BEGIN
IF INSERTING AND :new.CATEGORY_ID IS NULL THEN
SELECT sq_SRVS_MEDICAMENTS_category.NEXTVAL INTO :new.CATEGORY_ID FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_MEDICAMENTS_category_trg" ENABLE;


CREATE OR REPLACE TRIGGER "SRVS_MEDICAMENTS_label_trg"
BEFORE INSERT ON SRVS_MEDICAMENTS_label
FOR EACH ROW
BEGIN
IF INSERTING AND :new.LABEL_ID IS NULL THEN
SELECT sq_SRVS_MEDICAMENTS_label.NEXTVAL INTO :new.LABEL_ID FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_MEDICAMENTS_label_trg" ENABLE;


CREATE OR REPLACE TRIGGER "SRVS_MEDICAMENTS_trg"
BEFORE INSERT ON SRVS_MEDICAMENTS
FOR EACH ROW
BEGIN
IF INSERTING AND :new.MEDICAMENTS_ID IS NULL THEN
SELECT sq_SRVS_MEDICAMENTS.NEXTVAL INTO :new.MEDICAMENTS_ID FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_MEDICAMENTS_trg" ENABLE;

CREATE OR REPLACE TRIGGER "srvs_batch_trg"
BEFORE INSERT ON srvs_batch
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id_ IS NULL THEN
SELECT sq_srvs_batch.NEXTVAL INTO :new.id_ FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "srvs_batch_trg" ENABLE;

CREATE OR REPLACE TRIGGER "pivas_medical_freq_trg"
BEFORE INSERT ON SRVS_MEDICAMENTS_frequency
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id_ IS NULL THEN
SELECT sq_SRVS_MEDICAMENTS_frequency.NEXTVAL INTO :new.id_ FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "pivas_medical_freq_trg" ENABLE;

CREATE OR REPLACE TRIGGER "SRVS_GENERAL_RULE_trg"
BEFORE INSERT ON SRVS_GENERAL_RULE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id_ IS NULL THEN
SELECT sq_SRVS_GENERAL_RULE.NEXTVAL INTO :new.id_ FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_GENERAL_RULE_trg" ENABLE;

-- 病区
CREATE OR REPLACE TRIGGER "SRVS_INPATIENTAREA_TRG"
BEFORE INSERT ON SRVS_INPATIENTAREA
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT sq_SRVS_INPATIENTAREA.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_INPATIENTAREA_TRG" ENABLE;

-- 病人
CREATE OR REPLACE TRIGGER "SRVS_PATIENT_trg"
BEFORE INSERT ON SRVS_PATIENT
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_PATIENT.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

ALTER TRIGGER "SRVS_PATIENT_trg" ENABLE;

--用药途径表
CREATE OR REPLACE TRIGGER "SRVS_DRUGWAY_trg"
BEFORE INSERT ON SRVS_DRUGWAY
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_DRUGWAY.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

ALTER TRIGGER "SRVS_DRUGWAY_trg" ENABLE;

--配置费规则表
CREATE OR REPLACE TRIGGER "SRVS_CONFIGFEE_RULE_trg"
BEFORE INSERT ON SRVS_CONFIGFEE_RULE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_CONFIGFEE_RULE.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

ALTER TRIGGER "SRVS_CONFIGFEE_RULE_trg" ENABLE;

--配置费/材料费
CREATE OR REPLACE TRIGGER "SRVS_CONFIG_FEE_trg"
BEFORE INSERT ON SRVS_CONFIG_FEE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_CONFIG_FEE.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

--配置费类别
CREATE OR REPLACE TRIGGER "SRVS_CONFIG_FEETYPE_trg"
BEFORE INSERT ON SRVS_CONFIG_FEETYPE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_CONFIG_FEETYPE.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

ALTER TRIGGER "SRVS_CONFIG_FEE_trg" ENABLE;

--计量单位
CREATE OR REPLACE TRIGGER "SRVS_MEASUREMENT_UNIT_trg"
BEFORE INSERT ON SRVS_MEASUREMENT_UNIT
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_MEASUREMENT_UNIT.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

ALTER TRIGGER "SRVS_MEASUREMENT_UNIT_trg" ENABLE;

--核对类型
CREATE OR REPLACE TRIGGER "SRVS_CHECKTYPE_trg"
BEFORE INSERT ON SRVS_CHECKTYPE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_CHECKTYPE.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

ALTER TRIGGER "SRVS_CHECKTYPE_trg" ENABLE;

--审方错误类型表
CREATE OR REPLACE TRIGGER "SRVS_TRIAL_ERRORTYPE_trg"
BEFORE INSERT ON SRVS_TRIAL_ERRORTYPE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_TRIAL_ERRORTYPE.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

ALTER TRIGGER "SRVS_TRIAL_ERRORTYPE_trg" ENABLE;


CREATE OR REPLACE TRIGGER "SRVS_DOCTOR_ADVICE_trg"
BEFORE INSERT ON SRVS_DOCTOR_ADVICE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.yz_id IS NULL THEN
SELECT sq_SRVS_DOCTOR_ADVICE.NEXTVAL INTO :new.yz_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_DOCTOR_ADVICE_trg" ENABLE;

CREATE OR REPLACE TRIGGER "SRVS_ADVICE_ex_trg"
BEFORE INSERT ON SRVS_DOCTOR_ADVICE_exception
FOR EACH ROW
BEGIN
IF INSERTING AND :new.YZ_MAIN_ID IS NULL THEN
SELECT sq_SRVS_DOCTOR_ADVICE.NEXTVAL INTO :new.YZ_MAIN_ID FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SRVS_DOCTOR_ADVICE_main_trg"
BEFORE INSERT ON SRVS_DOCTOR_ADVICE_main
FOR EACH ROW
BEGIN
IF INSERTING AND :new.YZ_MAIN_ID IS NULL THEN
SELECT sq_SRVS_DOCTOR_ADVICE.NEXTVAL INTO :new.YZ_MAIN_ID FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SRVS_PRESCRIPTION_trg"
BEFORE INSERT ON SRVS_PRESCRIPTION
FOR EACH ROW
BEGIN
IF INSERTING AND :new.yd_id IS NULL THEN
SELECT sq_SRVS_PRESCRIPTION.NEXTVAL INTO :new.yd_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_PRESCRIPTION_trg" ENABLE;


CREATE OR REPLACE TRIGGER "SRVS_PRESCRIPTION_main_trg"
BEFORE INSERT ON SRVS_PRESCRIPTION_main
FOR EACH ROW
BEGIN
IF INSERTING AND :new.yd_main_id IS NULL THEN
SELECT sq_SRVS_PRESCRIPTION_main.NEXTVAL INTO :new.yd_main_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_PRESCRIPTION_main_trg" ENABLE;


CREATE OR REPLACE TRIGGER "SRVS_PRESCRIPTION_FEES_trg"
BEFORE INSERT ON SRVS_PRESCRIPTION_FEES
FOR EACH ROW
BEGIN
IF INSERTING AND :new.YD_PZF_ID IS NULL THEN
SELECT sq_SRVS_PRESCRIPTION_FEES.NEXTVAL INTO :new.YD_PZF_ID FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_PRESCRIPTION_FEES_trg" ENABLE;


CREATE OR REPLACE TRIGGER "SRVS_LABEL_ref_config_fee_trg"
BEFORE INSERT ON SRVS_LABEL_ref_config_fee
FOR EACH ROW
BEGIN
IF INSERTING AND :new.GID IS NULL THEN
SELECT sq_SRVS_LABEL_ref_config_fee.NEXTVAL INTO :new.GID FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "SRVS_LABEL_ref_config_fee_trg" ENABLE;

--员工信息
CREATE OR REPLACE TRIGGER "SRVS_EMPLOYEEINFO_trg"
BEFORE INSERT ON SRVS_EMPLOYEEINFO
FOR EACH ROW
BEGIN
IF INSERTING AND :new.gid IS NULL THEN
SELECT SQ_SRVS_EMPLOYEEINFO.NEXTVAL INTO :new.gid FROM DUAL;
END IF;
END;
/

--优先级规则 配置表
/*代码中实现，不用数据库触发器
CREATE OR REPLACE TRIGGER "SRVS_PRIORITY_RULES_TRG"
BEFORE INSERT ON SRVS_PRIORITY_RULES
FOR EACH ROW
BEGIN
IF INSERTING AND :new.pr_id IS NULL THEN
SELECT SQ_SRVS_PRIORITY_RULES.NEXTVAL INTO :new.pr_id FROM DUAL;
END IF;
END;
/
*/

--药品操作日志
CREATE OR REPLACE TRIGGER "SRVS_MEDICAMENTS_log_trg"
BEFORE INSERT ON SRVS_MEDICAMENT_LOG
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT sq_SRVS_MEDICAMENTS.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SRVS_VOLUME_RULES_TRG"
BEFORE INSERT ON SRVS_VOLUME_RULES
FOR EACH ROW
BEGIN
IF INSERTING AND :new.vr_id IS NULL THEN
SELECT SQ_SRVS_VOLUME_RULES.NEXTVAL INTO :new.vr_id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SRVS_OTHER_RULE_TRG"
BEFORE INSERT ON SRVS_OTHER_RULE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.or_id IS NULL THEN
SELECT SQ_SRVS_OTHER_RULE.NEXTVAL INTO :new.or_id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SYS_APP_USER_LOGIN_TRG"
BEFORE INSERT ON SYS_APP_USER_LOGIN
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT SQ_SYS_APP_USER_LOGIN.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SYS_SERVER_NODE_TRG"
BEFORE INSERT ON SYS_SERVER_NODE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT SQ_SYS_SERVER_NODE.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/

--删除数据时同步数据到结果表
create or replace trigger configfee_task
  after delete on SRVS_CONFIGFEE_TASK
  for each row
declare
  
begin

  INSERT INTO SRVS_CONFIGFEE_RESULT
  VALUES
    (:old.yd_pidsj,
     :old.costcode,
     :old.caseid,
     :old.account,
     :old.amount,
     :old.result,
     :old.adddate,
     :old.resultdesc);

end configfee_task;
/

CREATE OR REPLACE TRIGGER "SRVS_ADVICE_CHKRESULT_trg"
BEFORE INSERT ON SRVS_DOCTOR_ADVICE_CHECKRESULT
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT SQ_SRVS_ADVICE_CHKRESULT.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "dem_YDRecord_TRG"
BEFORE INSERT ON SRVS_PRESCRIPTION_RECORD
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT SQ_DEM_YDRecord.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SRVS_GROUP_trg"
BEFORE INSERT ON SRVS_GROUP
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT SQ_SRVS_GROUP.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SRVS_TRACKINGRECORD_trg"
  BEFORE INSERT ON SRVS_TRACKINGRECORD
  FOR EACH ROW
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
  SELECT SQ_SRVS_TRACKINGRECORD.NEXTVAL INTO :new.id FROM DUAL;
  END IF;
END;
/
create or replace trigger "SRVS_GROUP_update"
  after insert or update
  on SRVS_INPATIENTAREA
  for each row
declare
  v_count number;
begin
  IF INSERTING THEN
  	select count(*) into v_count from SRVS_GROUP where DEPTCODE=:new.DEPTCODE;
  	IF v_count = 0 THEN
    INSERT INTO SRVS_GROUP
      (
       DEPTCODE,
       DEPTNAME,
       ENABLED,
       LEVELNUM,
       STATE)
    VALUES
      (:new.DEPTCODE,
       :new.DEPTNAME,
       :new.ENABLED,
       1,
       0);
    END IF;
  END IF;
  IF UPDATING THEN
    UPDATE SRVS_GROUP
       SET DEPTNAME = :new.DEPTNAME,
           ENABLED     = :new.ENABLED
     WHERE DEPTCODE = :new.DEPTCODE;
  END IF;
end SRVS_GROUP_update;
/

CREATE OR REPLACE TRIGGER "SRVS_DRUGOPEN_AMOUNT_trg"
BEFORE INSERT ON SRVS_DRUGOPEN_AMOUNT
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT SQ_SRVS_DRUGOPEN_AMOUNT.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SRVS_PRINTLABEL_CON_trg"
BEFORE INSERT ON SRVS_PRINTLABEL_CON
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT SQ_SRVS_PRINTLABEL_CON.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/

CREATE OR REPLACE TRIGGER "SRVS_PRESCRIPTION_REFUND_TRG"
BEFORE INSERT ON SRVS_PRESCRIPTION_REFUND
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT SQ_SRVS_PRESCRIPTION_REFUND.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/


CREATE OR REPLACE TRIGGER "tib_SCHE_RECORD"
BEFORE INSERT ON SCHE_RECORD
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT sq_SCHE_RECORD.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_SCHE_RECORD" ENABLE;


CREATE OR REPLACE TRIGGER "tib_SCHE_DICT"
BEFORE INSERT ON SCHE_DICT
FOR EACH ROW
BEGIN
IF INSERTING AND :new.dic_id IS NULL THEN
SELECT sq_dict.NEXTVAL INTO :new.dic_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_SCHE_DICT" ENABLE;


CREATE OR REPLACE TRIGGER "tib_SCHE_HOLIDAY"
BEFORE INSERT ON SCHE_HOLIDAY
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT sq_holiday.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_SCHE_HOLIDAY" ENABLE;


CREATE OR REPLACE TRIGGER "tib_SCHE_USER"
BEFORE INSERT ON SCHE_USER
FOR EACH ROW
BEGIN
IF INSERTING AND :new.user_id IS NULL THEN
SELECT sq_SCHE_USER.NEXTVAL INTO :new.user_id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_SCHE_USER" ENABLE;

CREATE OR REPLACE TRIGGER "tib_SCHE_USER_GROUP"
BEFORE INSERT ON SCHE_USER_GROUP
FOR EACH ROW
BEGIN
IF INSERTING AND :new.groupid IS NULL THEN
SELECT sq_group.NEXTVAL INTO :new.groupid FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_SCHE_USER_GROUP" ENABLE;


CREATE OR REPLACE TRIGGER "tib_SCHE_POSITION"
BEFORE INSERT ON SCHE_POSITION
FOR EACH ROW
BEGIN
IF INSERTING AND :new.postid IS NULL THEN
SELECT sq_position.NEXTVAL INTO :new.postid FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_SCHE_POSITION" ENABLE;

CREATE OR REPLACE TRIGGER "tib_SCHE_WORK"
BEFORE INSERT ON SCHE_WORK
FOR EACH ROW
BEGIN
IF INSERTING AND :new.workid IS NULL THEN
SELECT sq_work.NEXTVAL INTO :new.workid FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_SCHE_WORK" ENABLE;

CREATE OR REPLACE TRIGGER "tib_SCHE_NOTE"
BEFORE INSERT ON SCHE_NOTE
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT sq_remark.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_SCHE_NOTE" ENABLE;

CREATE OR REPLACE TRIGGER "tib_sche_sign"
BEFORE INSERT ON sche_sign
FOR EACH ROW
BEGIN
IF INSERTING AND :new.id IS NULL THEN
SELECT sq_sign.NEXTVAL INTO :new.id FROM DUAL;
END IF;
END;
/
ALTER TRIGGER "tib_sche_sign" ENABLE;

/*
 * 人员表同步触发器
 * */
CREATE OR REPLACE TRIGGER "sync_SCHE_USER"
AFTER INSERT OR UPDATE OR DELETE ON SYS_USER
  FOR EACH ROW
  WHEN (new.USER_TYPE = 1)
declare
  v_count number;
BEGIN
  IF INSERTING THEN
    INSERT INTO SCHE_USER
      (USER_ID,
       USER_NAME,
       PARTAKE,
       EMAIL,
       TELLPHONE,
       CREATIONTIME,
       CREATER)
    VALUES
      (:new.USER_ID,
       :new.NAME,
       '1',
       :new.EMAIL,
       :new.TELEPHONE,
       sysdate,
       1);
  END IF;
  IF UPDATING THEN

  	select count(*) into v_count from SCHE_USER where USER_ID=:new.USER_ID;
  	IF v_count = 0 THEN
  	INSERT INTO SCHE_USER
      (USER_ID,
       USER_NAME,
       PARTAKE,
       EMAIL,
       TELLPHONE,
       CREATIONTIME,
       CREATER)
    VALUES
      (:new.USER_ID,
       :new.NAME,
       '1',
       :new.EMAIL,
       :new.TELEPHONE,
       sysdate,
       1);
  	ELSE
    UPDATE SCHE_USER
       SET USER_NAME = :new.NAME,
           EMAIL     = :new.EMAIL,
           TELLPHONE = :new.TELEPHONE
     WHERE USER_ID = :new.USER_ID;
    END IF;
  END IF;
END;
/